/*
 * Copyright 2024 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cronjob

const jobTemplate = `package job

import(
	"context"
)

{{- range .JobInfos }}

func {{.JobName}}(ctx context.Context) {
	// TODO: fill with your own logic
}
{{- end }}
`

const jobMainTemplate = `// Code generated by cwgo ({{.Version}}). DO NOT EDIT.
package main

import (
	"context"
    "log"
    "os"
    "os/signal"
    "syscall"

	"{{.PackagePrefix}}/internal"

	"time"

    "github.com/robfig/cron/v3"
)

func main() {
    ctx, cancel := context.WithCancel(context.Background())

    c := cron.New()
    
    schedule.Init(ctx,c)

    c.Start()

    sigs := make(chan os.Signal, 1)
    signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)
	<-sigs

    cancel()

    time.Sleep(2 * time.Second)

    c.Stop()
    log.Println("Cron job stopped gracefully.")
}

`

const jobScheduleTemplate = `package schedule

import (
	"context"
	"github.com/robfig/cron/v3"
	"log"
	"{{(index .JobInfos 0).PackagePrefix}}/internal/job"
)

func Init(ctx context.Context, c *cron.Cron){
	var err error
    {{range .JobInfos}}
    _, err = c.AddFunc("* * * * *", func(){
        select {
            case <-ctx.Done():
                log.Println("{{.JobName}} terminated.")
                return
            default:
                job.{{.JobName}}(ctx)
        }
	})
    if err != nil {
        log.Fatalf("Error adding cron job: %v", err)
    }
    {{end}}
}
`

const scriptTemplate = `#!/bin/bash

echo "Building cronjob binary..."
go build -o cronjob ../cmd/main.go

if [ $? -ne 0 ]; then
    echo "Error: Failed to build cronjob."
    exit 1
fi

echo "Running cronjob..."
./cronjob

if [ $? -ne 0 ]; then
    echo "Error: cronjob execution failed."
    exit 1
fi

echo "cronjob Done."

rm cronjob

if [ $? -ne 0 ]; then
    echo "Error: Failed to remove cronjob binary."
    exit 1
fi

`
