// Code generated by thriftgo (0.2.12). DO NOT EDIT.

package registry

import (
	"context"
	"fmt"
)

type RegisterReq struct {
	ServiceID string `thrift:"service_id,1" json:"service_id" query:"service_id,required"`
	Host      string `thrift:"host,2" json:"host" query:"host,required"`
	Port      int32  `thrift:"port,3" json:"port" query:"port,required"`
}

func NewRegisterReq() *RegisterReq {
	return &RegisterReq{}
}

func (p *RegisterReq) GetServiceID() (v string) {
	return p.ServiceID
}

func (p *RegisterReq) GetHost() (v string) {
	return p.Host
}

func (p *RegisterReq) GetPort() (v int32) {
	return p.Port
}

func (p *RegisterReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterReq(%+v)", *p)
}

type RegisterRes struct {
	Code int32  `thrift:"code,1" form:"code" json:"code" query:"code"`
	Msg  string `thrift:"msg,2" form:"msg" json:"msg" query:"msg"`
}

func NewRegisterRes() *RegisterRes {
	return &RegisterRes{}
}

func (p *RegisterRes) GetCode() (v int32) {
	return p.Code
}

func (p *RegisterRes) GetMsg() (v string) {
	return p.Msg
}

func (p *RegisterRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RegisterRes(%+v)", *p)
}

type DeregisterReq struct {
	ServiceID string `thrift:"service_id,1" json:"service_id" query:"service_id,required"`
}

func NewDeregisterReq() *DeregisterReq {
	return &DeregisterReq{}
}

func (p *DeregisterReq) GetServiceID() (v string) {
	return p.ServiceID
}

func (p *DeregisterReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeregisterReq(%+v)", *p)
}

type DeRegisterRes struct {
	Code int32  `thrift:"code,1" form:"code" json:"code" query:"code"`
	Msg  string `thrift:"msg,2" form:"msg" json:"msg" query:"msg"`
}

func NewDeRegisterRes() *DeRegisterRes {
	return &DeRegisterRes{}
}

func (p *DeRegisterRes) GetCode() (v int32) {
	return p.Code
}

func (p *DeRegisterRes) GetMsg() (v string) {
	return p.Msg
}

func (p *DeRegisterRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeRegisterRes(%+v)", *p)
}

type UpdateReq struct {
	ServiceID string `thrift:"service_id,1" json:"service_id" query:"service_id,required"`
}

func NewUpdateReq() *UpdateReq {
	return &UpdateReq{}
}

func (p *UpdateReq) GetServiceID() (v string) {
	return p.ServiceID
}

func (p *UpdateReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateReq(%+v)", *p)
}

type UpdateRes struct {
	Code int32  `thrift:"code,1" form:"code" json:"code" query:"code"`
	Msg  string `thrift:"msg,2" form:"msg" json:"msg" query:"msg"`
}

func NewUpdateRes() *UpdateRes {
	return &UpdateRes{}
}

func (p *UpdateRes) GetCode() (v int32) {
	return p.Code
}

func (p *UpdateRes) GetMsg() (v string) {
	return p.Msg
}

func (p *UpdateRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateRes(%+v)", *p)
}

type RegistryService interface {
	Register(ctx context.Context, req *RegisterReq) (r *RegisterRes, err error)

	Deregister(ctx context.Context, req *DeregisterReq) (r *DeRegisterRes, err error)

	Update(ctx context.Context, req *UpdateReq) (r *UpdateRes, err error)
}
