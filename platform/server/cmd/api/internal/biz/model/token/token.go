// Code generated by thriftgo (0.2.12). DO NOT EDIT.

package token

import (
	"context"
	"fmt"

	"github.com/cloudwego/cwgo/platform/server/shared/kitex_gen/model"
)

type AddTokenReq struct {
	RepositoryType   int32  `thrift:"repository_type,1" form:"repository_type,required" json:"repository_type,required"`
	RepositoryDomain string `thrift:"repository_domain,2" form:"repository_domain,required" json:"repository_domain,required"`
	Token            string `thrift:"token,3" form:"token,required" json:"token,required"`
}

func NewAddTokenReq() *AddTokenReq {
	return &AddTokenReq{}
}

func (p *AddTokenReq) GetRepositoryType() (v int32) {
	return p.RepositoryType
}

func (p *AddTokenReq) GetRepositoryDomain() (v string) {
	return p.RepositoryDomain
}

func (p *AddTokenReq) GetToken() (v string) {
	return p.Token
}

func (p *AddTokenReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddTokenReq(%+v)", *p)
}

type AddTokenResData struct {
	Owner          string `thrift:"owner,1" form:"owner" json:"owner" query:"owner"`
	ExpirationTime string `thrift:"expiration_time,2" form:"expiration_time" json:"expiration_time" query:"expiration_time"`
}

func NewAddTokenResData() *AddTokenResData {
	return &AddTokenResData{}
}

func (p *AddTokenResData) GetOwner() (v string) {
	return p.Owner
}

func (p *AddTokenResData) GetExpirationTime() (v string) {
	return p.ExpirationTime
}

func (p *AddTokenResData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddTokenResData(%+v)", *p)
}

type AddTokenRes struct {
	Code int32            `thrift:"code,1" form:"code" json:"code" query:"code"`
	Msg  string           `thrift:"msg,2" form:"msg" json:"msg" query:"msg"`
	Data *AddTokenResData `thrift:"data,3" form:"data" json:"data" query:"data"`
}

func NewAddTokenRes() *AddTokenRes {
	return &AddTokenRes{}
}

func (p *AddTokenRes) GetCode() (v int32) {
	return p.Code
}

func (p *AddTokenRes) GetMsg() (v string) {
	return p.Msg
}

var AddTokenRes_Data_DEFAULT *AddTokenResData

func (p *AddTokenRes) GetData() (v *AddTokenResData) {
	if !p.IsSetData() {
		return AddTokenRes_Data_DEFAULT
	}
	return p.Data
}

func (p *AddTokenRes) IsSetData() bool {
	return p.Data != nil
}

func (p *AddTokenRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddTokenRes(%+v)", *p)
}

type DeleteTokenReq struct {
	Ids []int64 `thrift:"ids,1" form:"ids,required" json:"ids,required" vd:"len($)>0"`
}

func NewDeleteTokenReq() *DeleteTokenReq {
	return &DeleteTokenReq{}
}

func (p *DeleteTokenReq) GetIds() (v []int64) {
	return p.Ids
}

func (p *DeleteTokenReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTokenReq(%+v)", *p)
}

type DeleteTokenRes struct {
	Code int32  `thrift:"code,1" form:"code" json:"code" query:"code"`
	Msg  string `thrift:"msg,2" form:"msg" json:"msg" query:"msg"`
}

func NewDeleteTokenRes() *DeleteTokenRes {
	return &DeleteTokenRes{}
}

func (p *DeleteTokenRes) GetCode() (v int32) {
	return p.Code
}

func (p *DeleteTokenRes) GetMsg() (v string) {
	return p.Msg
}

func (p *DeleteTokenRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteTokenRes(%+v)", *p)
}

type GetTokenReq struct {
	Page             int32  `thrift:"page,1" json:"page" query:"page" vd:"$>=0"`
	Limit            int32  `thrift:"limit,2" json:"limit" query:"limit" vd:"$>=0"`
	Order            int32  `thrift:"order,3" json:"order" query:"order" vd:"$>=0"`
	OrderBy          string `thrift:"order_by,4" json:"order_by" query:"order_by"`
	RepositoryType   int32  `thrift:"repository_type,5" json:"repository_type" query:"repository_type"`
	RepositoryDomain string `thrift:"repository_domain,6" json:"repository_domain" query:"repository_domain"`
	Owner            string `thrift:"owner,7" json:"owner" query:"owner"`
}

func NewGetTokenReq() *GetTokenReq {
	return &GetTokenReq{}
}

func (p *GetTokenReq) GetPage() (v int32) {
	return p.Page
}

func (p *GetTokenReq) GetLimit() (v int32) {
	return p.Limit
}

func (p *GetTokenReq) GetOrder() (v int32) {
	return p.Order
}

func (p *GetTokenReq) GetOrderBy() (v string) {
	return p.OrderBy
}

func (p *GetTokenReq) GetRepositoryType() (v int32) {
	return p.RepositoryType
}

func (p *GetTokenReq) GetRepositoryDomain() (v string) {
	return p.RepositoryDomain
}

func (p *GetTokenReq) GetOwner() (v string) {
	return p.Owner
}

func (p *GetTokenReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTokenReq(%+v)", *p)
}

type GetTokenResData struct {
	Tokens []*model.Token `thrift:"tokens,1" form:"tokens" json:"tokens" query:"tokens"`
	Total  int32          `thrift:"total,2" form:"total" json:"total" query:"total"`
}

func NewGetTokenResData() *GetTokenResData {
	return &GetTokenResData{}
}

func (p *GetTokenResData) GetTokens() (v []*model.Token) {
	return p.Tokens
}

func (p *GetTokenResData) GetTotal() (v int32) {
	return p.Total
}

func (p *GetTokenResData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTokenResData(%+v)", *p)
}

type GetTokenRes struct {
	Code int32            `thrift:"code,1" form:"code" json:"code" query:"code"`
	Msg  string           `thrift:"msg,2" form:"msg" json:"msg" query:"msg"`
	Data *GetTokenResData `thrift:"data,3" form:"data" json:"data" query:"data"`
}

func NewGetTokenRes() *GetTokenRes {
	return &GetTokenRes{}
}

func (p *GetTokenRes) GetCode() (v int32) {
	return p.Code
}

func (p *GetTokenRes) GetMsg() (v string) {
	return p.Msg
}

var GetTokenRes_Data_DEFAULT *GetTokenResData

func (p *GetTokenRes) GetData() (v *GetTokenResData) {
	if !p.IsSetData() {
		return GetTokenRes_Data_DEFAULT
	}
	return p.Data
}

func (p *GetTokenRes) IsSetData() bool {
	return p.Data != nil
}

func (p *GetTokenRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetTokenRes(%+v)", *p)
}

type TokenService interface {
	AddToken(ctx context.Context, req *AddTokenReq) (r *AddTokenRes, err error)

	DeleteToken(ctx context.Context, req *DeleteTokenReq) (r *DeleteTokenRes, err error)

	GetToken(ctx context.Context, req *GetTokenReq) (r *GetTokenRes, err error)
}
