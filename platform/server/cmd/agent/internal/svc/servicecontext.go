/*
 *
 * Copyright 2023 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package svc

import (
	"context"
	"fmt"
	"os"
	"path/filepath"

	"github.com/cloudwego/cwgo/platform/server/cmd/agent/pkg/generator"
	"github.com/cloudwego/cwgo/platform/server/shared/consts"
	"github.com/cloudwego/cwgo/platform/server/shared/dao"
	"github.com/cloudwego/cwgo/platform/server/shared/kitex_gen/model"
	"github.com/cloudwego/cwgo/platform/server/shared/logger"
	"github.com/cloudwego/cwgo/platform/server/shared/repository"
	"github.com/cloudwego/cwgo/platform/server/shared/utils"
	"go.uber.org/zap"
)

type ServiceContext struct {
	DaoManager  *dao.Manager
	RepoManager *repository.Manager
	Generator   generator.Generator
}

func (svc *ServiceContext) GenerateCode(ctx context.Context, repoClient repository.IRepository, tempDir, importBaseDirPath string, idlModelWithRepoInfo *model.IDLWithRepositoryInfo, idlRepoModel *model.Repository, archiveName string) error {
	idlPid, owner, _, err := repoClient.ParseFileUrl(
		utils.GetRepoFullUrl(
			idlRepoModel.RepositoryType,
			fmt.Sprintf("https://%s/%s/%s",
				idlRepoModel.RepositoryDomain,
				idlRepoModel.RepositoryOwner,
				idlRepoModel.RepositoryName,
			),
			idlRepoModel.RepositoryBranch,
			idlModelWithRepoInfo.MainIdlPath,
		),
	)
	if err != nil {
		return err
	}

	var idlSearchPath string

	tempDirRepo := tempDir + "/" + consts.TempDirRepo + "/" + archiveName

	if importBaseDirPath != "" {
		idlSearchPath = filepath.Clean(filepath.Join(tempDirRepo, importBaseDirPath))
	}

	err = os.Mkdir(tempDir+"/"+consts.TempDirGeneratedCode, 0o755)
	if err != nil {
		logger.Logger.Error(consts.ErrMsgCommonMkdir, zap.Error(err))
		return consts.ErrCommonMkdir
	}

	tempDirGeneratedCode := tempDir + "/" + consts.TempDirGeneratedCode
	mainIdlFilePath := tempDirRepo + idlPid

	// generate code using cwgo
	err = svc.Generator.Generate(
		idlRepoModel.RepositoryDomain,
		idlRepoModel.RepositoryOwner,
		mainIdlFilePath,
		idlSearchPath,
		idlModelWithRepoInfo.ServiceName,
		tempDirGeneratedCode,
	)
	if err != nil {
		logger.Logger.Error(consts.ErrMsgCommonGenerateCode, zap.Error(err))
		return consts.ErrCommonGenerateCode
	}

	fileContentMap := make(map[string][]byte)
	// parse the file and add it to the map
	if err := utils.ProcessFolders(
		fileContentMap,
		tempDirGeneratedCode,
		"kitex_gen", "rpc", "go.mod", "go.sum",
	); err != nil {
		return consts.ErrCommonProcessFolders
	}

	// push files to the repository
	serviceRepositoryModel, err := svc.DaoManager.Repository.GetRepository(ctx, idlModelWithRepoInfo.ServiceRepositoryId)
	if err != nil {
		return consts.ErrDatabase
	}

	err = repoClient.PushFilesToRepository(fileContentMap, owner, serviceRepositoryModel.RepositoryName, consts.MainRef, "generated by cwgo")
	if err != nil {
		return consts.ErrRepoPush
	}

	return nil
}
