path: main.go
update_behavior:
  type: cover
body: |-
  /*
  *
  * Copyright 2022 CloudWeGo Authors
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
  * You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
  *
  * Unless required by applicable law or agreed to in writing, software
  * distributed under the License is distributed on an "AS IS" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  */
  
  package main

  import (
    "fmt"
    apollo "wecqupt/app/common/config"
    "wecqupt/app/common/config/model"
    "{{.ImportPath}}/{{ToLower .ServiceName}}"
    "wecqupt/app/common/logger"
    "{{.Module}}/internal/config"
    "{{.Module}}/internal/svc"
    "wecqupt/utils"
  
    "go.uber.org/zap"
  )
  
  var c config.Config

  func main() {
    // 初始化配置管理器
    err := apollo.InitClient(config.ServiceName)
    if err != nil {
      panic(fmt.Sprintf("initialize Apollo Client failed, err: %v", err))
    }
  
    namespace, serviceSingleName := utils.GetServiceDetails(config.ServiceName)
  
    err = apollo.Common().UnmarshalServiceConfig(namespace, serviceSingleName, &c)
  
    // 初始化服务
    c.SetUp()
  
    // 初始化服务上下文
    svcCtx := svc.NewServiceContext(c)

    // 启动服务
    svr := {{ToLower .ServiceName}}.NewServer(
        &{{.ServiceName}}Impl{
          svcCtx: svcCtx,
        },
        model.KitexServerOptions...,
    )

    err = svr.Run()
    if err != nil {
      logger.Logger.Error("kitex server run failed.", zap.Error(err))
    }
  }