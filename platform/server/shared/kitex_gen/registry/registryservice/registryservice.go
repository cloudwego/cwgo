// Code generated by Kitex v0.6.1. DO NOT EDIT.

package registryservice

import (
	"context"
	registry "github.com/cloudwego/cwgo/platform/server/shared/kitex_gen/registry"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return registryServiceServiceInfo
}

var registryServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "RegistryService"
	handlerType := (*registry.RegistryService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Register":   kitex.NewMethodInfo(registerHandler, newRegistryServiceRegisterArgs, newRegistryServiceRegisterResult, false),
		"Deregister": kitex.NewMethodInfo(deregisterHandler, newRegistryServiceDeregisterArgs, newRegistryServiceDeregisterResult, false),
		"Update":     kitex.NewMethodInfo(updateHandler, newRegistryServiceUpdateArgs, newRegistryServiceUpdateResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "registry",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func registerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*registry.RegistryServiceRegisterArgs)
	realResult := result.(*registry.RegistryServiceRegisterResult)
	success, err := handler.(registry.RegistryService).Register(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRegistryServiceRegisterArgs() interface{} {
	return registry.NewRegistryServiceRegisterArgs()
}

func newRegistryServiceRegisterResult() interface{} {
	return registry.NewRegistryServiceRegisterResult()
}

func deregisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*registry.RegistryServiceDeregisterArgs)
	realResult := result.(*registry.RegistryServiceDeregisterResult)
	success, err := handler.(registry.RegistryService).Deregister(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRegistryServiceDeregisterArgs() interface{} {
	return registry.NewRegistryServiceDeregisterArgs()
}

func newRegistryServiceDeregisterResult() interface{} {
	return registry.NewRegistryServiceDeregisterResult()
}

func updateHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*registry.RegistryServiceUpdateArgs)
	realResult := result.(*registry.RegistryServiceUpdateResult)
	success, err := handler.(registry.RegistryService).Update(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newRegistryServiceUpdateArgs() interface{} {
	return registry.NewRegistryServiceUpdateArgs()
}

func newRegistryServiceUpdateResult() interface{} {
	return registry.NewRegistryServiceUpdateResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Register(ctx context.Context, req *registry.RegisterReq) (r *registry.RegisterRes, err error) {
	var _args registry.RegistryServiceRegisterArgs
	_args.Req = req
	var _result registry.RegistryServiceRegisterResult
	if err = p.c.Call(ctx, "Register", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Deregister(ctx context.Context, req *registry.DeregisterReq) (r *registry.DeRegisterRes, err error) {
	var _args registry.RegistryServiceDeregisterArgs
	_args.Req = req
	var _result registry.RegistryServiceDeregisterResult
	if err = p.c.Call(ctx, "Deregister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Update(ctx context.Context, req *registry.UpdateReq) (r *registry.UpdateRes, err error) {
	var _args registry.RegistryServiceUpdateArgs
	_args.Req = req
	var _result registry.RegistryServiceUpdateResult
	if err = p.c.Call(ctx, "Update", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
