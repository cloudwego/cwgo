// Code generated by thriftgo (0.3.4). DO NOT EDIT.

package model

import (
	"fmt"
)

type Template struct {
	Id   int64  `thrift:"id,1" frugal:"1,default,i64" form:"id" json:"id" query:"id"`
	Name string `thrift:"name,2" frugal:"2,default,string" form:"name" json:"name" query:"name"`
	// 1: hz, 2: kitex
	Type       int32  `thrift:"type,3" frugal:"3,default,i32" form:"type" json:"type" query:"type"`
	IsDeleted  bool   `thrift:"is_deleted,4" frugal:"4,default,bool" form:"is_deleted" json:"is_deleted" query:"is_deleted"`
	CreateTime string `thrift:"create_time,5" frugal:"5,default,string" form:"create_time" json:"create_time" query:"create_time"`
	UpdateTime string `thrift:"update_time,6" frugal:"6,default,string" form:"update_time" json:"update_time" query:"update_time"`
}

func NewTemplate() *Template {
	return &Template{}
}

func (p *Template) InitDefault() {
	*p = Template{}
}

func (p *Template) GetId() (v int64) {
	return p.Id
}

func (p *Template) GetName() (v string) {
	return p.Name
}

func (p *Template) GetType() (v int32) {
	return p.Type
}

func (p *Template) GetIsDeleted() (v bool) {
	return p.IsDeleted
}

func (p *Template) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *Template) GetUpdateTime() (v string) {
	return p.UpdateTime
}
func (p *Template) SetId(val int64) {
	p.Id = val
}
func (p *Template) SetName(val string) {
	p.Name = val
}
func (p *Template) SetType(val int32) {
	p.Type = val
}
func (p *Template) SetIsDeleted(val bool) {
	p.IsDeleted = val
}
func (p *Template) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *Template) SetUpdateTime(val string) {
	p.UpdateTime = val
}

func (p *Template) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Template(%+v)", *p)
}

type TemplateItem struct {
	Id         int64  `thrift:"id,1" frugal:"1,default,i64" form:"id" json:"id" query:"id"`
	TemplateId int64  `thrift:"template_id,2" frugal:"2,default,i64" form:"template_id" json:"template_id" query:"template_id"`
	Name       string `thrift:"name,3" frugal:"3,default,string" form:"name" json:"name" query:"name"`
	Content    string `thrift:"content,4" frugal:"4,default,string" form:"content" json:"content" query:"content"`
	IsDeleted  bool   `thrift:"is_deleted,5" frugal:"5,default,bool" form:"is_deleted" json:"is_deleted" query:"is_deleted"`
	CreateTime string `thrift:"create_time,6" frugal:"6,default,string" form:"create_time" json:"create_time" query:"create_time"`
	UpdateTime string `thrift:"update_time,7" frugal:"7,default,string" form:"update_time" json:"update_time" query:"update_time"`
}

func NewTemplateItem() *TemplateItem {
	return &TemplateItem{}
}

func (p *TemplateItem) InitDefault() {
	*p = TemplateItem{}
}

func (p *TemplateItem) GetId() (v int64) {
	return p.Id
}

func (p *TemplateItem) GetTemplateId() (v int64) {
	return p.TemplateId
}

func (p *TemplateItem) GetName() (v string) {
	return p.Name
}

func (p *TemplateItem) GetContent() (v string) {
	return p.Content
}

func (p *TemplateItem) GetIsDeleted() (v bool) {
	return p.IsDeleted
}

func (p *TemplateItem) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *TemplateItem) GetUpdateTime() (v string) {
	return p.UpdateTime
}
func (p *TemplateItem) SetId(val int64) {
	p.Id = val
}
func (p *TemplateItem) SetTemplateId(val int64) {
	p.TemplateId = val
}
func (p *TemplateItem) SetName(val string) {
	p.Name = val
}
func (p *TemplateItem) SetContent(val string) {
	p.Content = val
}
func (p *TemplateItem) SetIsDeleted(val bool) {
	p.IsDeleted = val
}
func (p *TemplateItem) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *TemplateItem) SetUpdateTime(val string) {
	p.UpdateTime = val
}

func (p *TemplateItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TemplateItem(%+v)", *p)
}

type TemplateWithItemInfo struct {
	Template *Template       `thrift:"template,1" frugal:"1,default,Template" form:"template" json:"template" query:"template"`
	Items    []*TemplateItem `thrift:"items,2" frugal:"2,default,list<TemplateItem>" form:"items" json:"items" query:"items"`
}

func NewTemplateWithItemInfo() *TemplateWithItemInfo {
	return &TemplateWithItemInfo{}
}

func (p *TemplateWithItemInfo) InitDefault() {
	*p = TemplateWithItemInfo{}
}

var TemplateWithItemInfo_Template_DEFAULT *Template

func (p *TemplateWithItemInfo) GetTemplate() (v *Template) {
	if !p.IsSetTemplate() {
		return TemplateWithItemInfo_Template_DEFAULT
	}
	return p.Template
}

func (p *TemplateWithItemInfo) GetItems() (v []*TemplateItem) {
	return p.Items
}
func (p *TemplateWithItemInfo) SetTemplate(val *Template) {
	p.Template = val
}
func (p *TemplateWithItemInfo) SetItems(val []*TemplateItem) {
	p.Items = val
}

func (p *TemplateWithItemInfo) IsSetTemplate() bool {
	return p.Template != nil
}

func (p *TemplateWithItemInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TemplateWithItemInfo(%+v)", *p)
}
