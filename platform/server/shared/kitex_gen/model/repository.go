// Code generated by thriftgo (0.2.12). DO NOT EDIT.

package model

import (
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type Repository struct {
	Id               int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	RepositoryType   int32  `thrift:"repository_type,2" frugal:"2,default,i32" json:"repository_type"`
	RepositoryDomain string `thrift:"repository_domain,3" frugal:"3,default,string" json:"repository_domain"`
	RepositoryOwner  string `thrift:"repository_owner,4" frugal:"4,default,string" json:"repository_owner"`
	RepositoryName   string `thrift:"repository_name,5" frugal:"5,default,string" json:"repository_name"`
	RepositoryBranch string `thrift:"repository_branch,6" frugal:"6,default,string" json:"repository_branch"`
	StoreType        int32  `thrift:"store_type,7" frugal:"7,default,i32" json:"store_type"`
	TokenId          int64  `thrift:"token_id,8" frugal:"8,default,i64" json:"token_id"`
	Status           int32  `thrift:"status,9" frugal:"9,default,i32" json:"status"`
	LastUpdateTime   string `thrift:"last_update_time,10" frugal:"10,default,string" json:"last_update_time"`
	LastSyncTime     string `thrift:"last_sync_time,11" frugal:"11,default,string" json:"last_sync_time"`
	IsDeleted        bool   `thrift:"is_deleted,12" frugal:"12,default,bool" json:"is_deleted"`
	CreateTime       string `thrift:"create_time,13" frugal:"13,default,string" json:"create_time"`
	UpdateTime       string `thrift:"update_time,14" frugal:"14,default,string" json:"update_time"`
}

func NewRepository() *Repository {
	return &Repository{}
}

func (p *Repository) InitDefault() {
	*p = Repository{}
}

func (p *Repository) GetId() (v int64) {
	return p.Id
}

func (p *Repository) GetRepositoryType() (v int32) {
	return p.RepositoryType
}

func (p *Repository) GetRepositoryDomain() (v string) {
	return p.RepositoryDomain
}

func (p *Repository) GetRepositoryOwner() (v string) {
	return p.RepositoryOwner
}

func (p *Repository) GetRepositoryName() (v string) {
	return p.RepositoryName
}

func (p *Repository) GetRepositoryBranch() (v string) {
	return p.RepositoryBranch
}

func (p *Repository) GetStoreType() (v int32) {
	return p.StoreType
}

func (p *Repository) GetTokenId() (v int64) {
	return p.TokenId
}

func (p *Repository) GetStatus() (v int32) {
	return p.Status
}

func (p *Repository) GetLastUpdateTime() (v string) {
	return p.LastUpdateTime
}

func (p *Repository) GetLastSyncTime() (v string) {
	return p.LastSyncTime
}

func (p *Repository) GetIsDeleted() (v bool) {
	return p.IsDeleted
}

func (p *Repository) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *Repository) GetUpdateTime() (v string) {
	return p.UpdateTime
}
func (p *Repository) SetId(val int64) {
	p.Id = val
}
func (p *Repository) SetRepositoryType(val int32) {
	p.RepositoryType = val
}
func (p *Repository) SetRepositoryDomain(val string) {
	p.RepositoryDomain = val
}
func (p *Repository) SetRepositoryOwner(val string) {
	p.RepositoryOwner = val
}
func (p *Repository) SetRepositoryName(val string) {
	p.RepositoryName = val
}
func (p *Repository) SetRepositoryBranch(val string) {
	p.RepositoryBranch = val
}
func (p *Repository) SetStoreType(val int32) {
	p.StoreType = val
}
func (p *Repository) SetTokenId(val int64) {
	p.TokenId = val
}
func (p *Repository) SetStatus(val int32) {
	p.Status = val
}
func (p *Repository) SetLastUpdateTime(val string) {
	p.LastUpdateTime = val
}
func (p *Repository) SetLastSyncTime(val string) {
	p.LastSyncTime = val
}
func (p *Repository) SetIsDeleted(val bool) {
	p.IsDeleted = val
}
func (p *Repository) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *Repository) SetUpdateTime(val string) {
	p.UpdateTime = val
}

var fieldIDToName_Repository = map[int16]string{
	1:  "id",
	2:  "repository_type",
	3:  "repository_domain",
	4:  "repository_owner",
	5:  "repository_name",
	6:  "repository_branch",
	7:  "store_type",
	8:  "token_id",
	9:  "status",
	10: "last_update_time",
	11: "last_sync_time",
	12: "is_deleted",
	13: "create_time",
	14: "update_time",
}

func (p *Repository) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Repository[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Repository) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = v
	}
	return nil
}

func (p *Repository) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.RepositoryType = v
	}
	return nil
}

func (p *Repository) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RepositoryDomain = v
	}
	return nil
}

func (p *Repository) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RepositoryOwner = v
	}
	return nil
}

func (p *Repository) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RepositoryName = v
	}
	return nil
}

func (p *Repository) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.RepositoryBranch = v
	}
	return nil
}

func (p *Repository) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.StoreType = v
	}
	return nil
}

func (p *Repository) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.TokenId = v
	}
	return nil
}

func (p *Repository) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Status = v
	}
	return nil
}

func (p *Repository) ReadField10(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LastUpdateTime = v
	}
	return nil
}

func (p *Repository) ReadField11(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.LastSyncTime = v
	}
	return nil
}

func (p *Repository) ReadField12(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.IsDeleted = v
	}
	return nil
}

func (p *Repository) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.CreateTime = v
	}
	return nil
}

func (p *Repository) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.UpdateTime = v
	}
	return nil
}

func (p *Repository) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Repository"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *Repository) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Id); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *Repository) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("repository_type", thrift.I32, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.RepositoryType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *Repository) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("repository_domain", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RepositoryDomain); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *Repository) writeField4(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("repository_owner", thrift.STRING, 4); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RepositoryOwner); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *Repository) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("repository_name", thrift.STRING, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RepositoryName); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *Repository) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("repository_branch", thrift.STRING, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.RepositoryBranch); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *Repository) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("store_type", thrift.I32, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.StoreType); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *Repository) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("token_id", thrift.I64, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.TokenId); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *Repository) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("status", thrift.I32, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Status); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *Repository) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("last_update_time", thrift.STRING, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LastUpdateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *Repository) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("last_sync_time", thrift.STRING, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.LastSyncTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *Repository) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("is_deleted", thrift.BOOL, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBool(p.IsDeleted); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *Repository) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("create_time", thrift.STRING, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.CreateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *Repository) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("update_time", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.UpdateTime); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *Repository) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Repository(%+v)", *p)
}

func (p *Repository) DeepEqual(ano *Repository) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.RepositoryType) {
		return false
	}
	if !p.Field3DeepEqual(ano.RepositoryDomain) {
		return false
	}
	if !p.Field4DeepEqual(ano.RepositoryOwner) {
		return false
	}
	if !p.Field5DeepEqual(ano.RepositoryName) {
		return false
	}
	if !p.Field6DeepEqual(ano.RepositoryBranch) {
		return false
	}
	if !p.Field7DeepEqual(ano.StoreType) {
		return false
	}
	if !p.Field8DeepEqual(ano.TokenId) {
		return false
	}
	if !p.Field9DeepEqual(ano.Status) {
		return false
	}
	if !p.Field10DeepEqual(ano.LastUpdateTime) {
		return false
	}
	if !p.Field11DeepEqual(ano.LastSyncTime) {
		return false
	}
	if !p.Field12DeepEqual(ano.IsDeleted) {
		return false
	}
	if !p.Field13DeepEqual(ano.CreateTime) {
		return false
	}
	if !p.Field14DeepEqual(ano.UpdateTime) {
		return false
	}
	return true
}

func (p *Repository) Field1DeepEqual(src int64) bool {

	if p.Id != src {
		return false
	}
	return true
}
func (p *Repository) Field2DeepEqual(src int32) bool {

	if p.RepositoryType != src {
		return false
	}
	return true
}
func (p *Repository) Field3DeepEqual(src string) bool {

	if strings.Compare(p.RepositoryDomain, src) != 0 {
		return false
	}
	return true
}
func (p *Repository) Field4DeepEqual(src string) bool {

	if strings.Compare(p.RepositoryOwner, src) != 0 {
		return false
	}
	return true
}
func (p *Repository) Field5DeepEqual(src string) bool {

	if strings.Compare(p.RepositoryName, src) != 0 {
		return false
	}
	return true
}
func (p *Repository) Field6DeepEqual(src string) bool {

	if strings.Compare(p.RepositoryBranch, src) != 0 {
		return false
	}
	return true
}
func (p *Repository) Field7DeepEqual(src int32) bool {

	if p.StoreType != src {
		return false
	}
	return true
}
func (p *Repository) Field8DeepEqual(src int64) bool {

	if p.TokenId != src {
		return false
	}
	return true
}
func (p *Repository) Field9DeepEqual(src int32) bool {

	if p.Status != src {
		return false
	}
	return true
}
func (p *Repository) Field10DeepEqual(src string) bool {

	if strings.Compare(p.LastUpdateTime, src) != 0 {
		return false
	}
	return true
}
func (p *Repository) Field11DeepEqual(src string) bool {

	if strings.Compare(p.LastSyncTime, src) != 0 {
		return false
	}
	return true
}
func (p *Repository) Field12DeepEqual(src bool) bool {

	if p.IsDeleted != src {
		return false
	}
	return true
}
func (p *Repository) Field13DeepEqual(src string) bool {

	if strings.Compare(p.CreateTime, src) != 0 {
		return false
	}
	return true
}
func (p *Repository) Field14DeepEqual(src string) bool {

	if strings.Compare(p.UpdateTime, src) != 0 {
		return false
	}
	return true
}
