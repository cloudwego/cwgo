// Code generated by thriftgo (0.3.4). DO NOT EDIT.

package model

import (
	"fmt"
)

type Repository struct {
	// repository record id
	Id int64 `thrift:"id,1" frugal:"1,default,i64" form:"id" json:"id" query:"id"`
	// repository type (1: gitlab, 2: github)
	RepositoryType int32 `thrift:"repository_type,2" frugal:"2,default,i32" form:"repository_type" json:"repository_type" query:"repository_type"`
	// repository domain
	RepositoryDomain string `thrift:"repository_domain,3" frugal:"3,default,string" form:"repository_domain" json:"repository_domain" query:"repository_domain"`
	// repository owner
	RepositoryOwner string `thrift:"repository_owner,4" frugal:"4,default,string" form:"repository_owner" json:"repository_owner" query:"repository_owner"`
	// repository name
	RepositoryName string `thrift:"repository_name,5" frugal:"5,default,string" form:"repository_name" json:"repository_name" query:"repository_name"`
	// repository branch
	RepositoryBranch string `thrift:"repository_branch,6" frugal:"6,default,string" form:"repository_branch" json:"repository_branch" query:"repository_branch"`
	// repository store type (1: stores idl file, 2: stores service code)
	StoreType int32 `thrift:"store_type,7" frugal:"7,default,i32" form:"store_type" json:"store_type" query:"store_type"`
	// token id which repo currently using
	TokenId int64 `thrift:"token_id,8" frugal:"8,default,i64" form:"token_id" json:"token_id" query:"token_id"`
	// repository status (need sync or not)
	Status int32 `thrift:"status,9" frugal:"9,default,i32" form:"status" json:"status" query:"status"`
	// repo file last update time
	LastUpdateTime string `thrift:"last_update_time,10" frugal:"10,default,string" form:"last_update_time" json:"last_update_time" query:"last_update_time"`
	// repo last sync time
	LastSyncTime string `thrift:"last_sync_time,11" frugal:"11,default,string" form:"last_sync_time" json:"last_sync_time" query:"last_sync_time"`
	IsDeleted    bool   `thrift:"is_deleted,12" frugal:"12,default,bool" form:"is_deleted" json:"is_deleted" query:"is_deleted"`
	CreateTime   string `thrift:"create_time,13" frugal:"13,default,string" form:"create_time" json:"create_time" query:"create_time"`
	UpdateTime   string `thrift:"update_time,14" frugal:"14,default,string" form:"update_time" json:"update_time" query:"update_time"`
}

func NewRepository() *Repository {
	return &Repository{}
}

func (p *Repository) InitDefault() {
	*p = Repository{}
}

func (p *Repository) GetId() (v int64) {
	return p.Id
}

func (p *Repository) GetRepositoryType() (v int32) {
	return p.RepositoryType
}

func (p *Repository) GetRepositoryDomain() (v string) {
	return p.RepositoryDomain
}

func (p *Repository) GetRepositoryOwner() (v string) {
	return p.RepositoryOwner
}

func (p *Repository) GetRepositoryName() (v string) {
	return p.RepositoryName
}

func (p *Repository) GetRepositoryBranch() (v string) {
	return p.RepositoryBranch
}

func (p *Repository) GetStoreType() (v int32) {
	return p.StoreType
}

func (p *Repository) GetTokenId() (v int64) {
	return p.TokenId
}

func (p *Repository) GetStatus() (v int32) {
	return p.Status
}

func (p *Repository) GetLastUpdateTime() (v string) {
	return p.LastUpdateTime
}

func (p *Repository) GetLastSyncTime() (v string) {
	return p.LastSyncTime
}

func (p *Repository) GetIsDeleted() (v bool) {
	return p.IsDeleted
}

func (p *Repository) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *Repository) GetUpdateTime() (v string) {
	return p.UpdateTime
}
func (p *Repository) SetId(val int64) {
	p.Id = val
}
func (p *Repository) SetRepositoryType(val int32) {
	p.RepositoryType = val
}
func (p *Repository) SetRepositoryDomain(val string) {
	p.RepositoryDomain = val
}
func (p *Repository) SetRepositoryOwner(val string) {
	p.RepositoryOwner = val
}
func (p *Repository) SetRepositoryName(val string) {
	p.RepositoryName = val
}
func (p *Repository) SetRepositoryBranch(val string) {
	p.RepositoryBranch = val
}
func (p *Repository) SetStoreType(val int32) {
	p.StoreType = val
}
func (p *Repository) SetTokenId(val int64) {
	p.TokenId = val
}
func (p *Repository) SetStatus(val int32) {
	p.Status = val
}
func (p *Repository) SetLastUpdateTime(val string) {
	p.LastUpdateTime = val
}
func (p *Repository) SetLastSyncTime(val string) {
	p.LastSyncTime = val
}
func (p *Repository) SetIsDeleted(val bool) {
	p.IsDeleted = val
}
func (p *Repository) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *Repository) SetUpdateTime(val string) {
	p.UpdateTime = val
}

func (p *Repository) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Repository(%+v)", *p)
}
