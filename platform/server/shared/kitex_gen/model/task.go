// Code generated by thriftgo (0.3.4). DO NOT EDIT.

package model

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type Type int64

const (
	Type_sync_idl_data Type = 0
)

func (p Type) String() string {
	switch p {
	case Type_sync_idl_data:
		return "sync_idl_data"
	}
	return "<UNSET>"
}

func TypeFromString(s string) (Type, error) {
	switch s {
	case "sync_idl_data":
		return Type_sync_idl_data, nil
	}
	return Type(0), fmt.Errorf("not a valid Type string")
}

func TypePtr(v Type) *Type { return &v }
func (p *Type) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = Type(result.Int64)
	return
}

func (p *Type) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Task struct {
	Id           string `thrift:"Id,1" frugal:"1,default,string" json:"Id"`
	Type         Type   `thrift:"Type,2" frugal:"2,default,Type" json:"Type"`
	ScheduleTime string `thrift:"ScheduleTime,3" frugal:"3,default,string" json:"ScheduleTime"`
	Data         *Data  `thrift:"Data,4" frugal:"4,default,Data" json:"Data"`
}

func NewTask() *Task {
	return &Task{}
}

func (p *Task) InitDefault() {
	*p = Task{}
}

func (p *Task) GetId() (v string) {
	return p.Id
}

func (p *Task) GetType() (v Type) {
	return p.Type
}

func (p *Task) GetScheduleTime() (v string) {
	return p.ScheduleTime
}

var Task_Data_DEFAULT *Data

func (p *Task) GetData() (v *Data) {
	if !p.IsSetData() {
		return Task_Data_DEFAULT
	}
	return p.Data
}
func (p *Task) SetId(val string) {
	p.Id = val
}
func (p *Task) SetType(val Type) {
	p.Type = val
}
func (p *Task) SetScheduleTime(val string) {
	p.ScheduleTime = val
}
func (p *Task) SetData(val *Data) {
	p.Data = val
}

func (p *Task) IsSetData() bool {
	return p.Data != nil
}

func (p *Task) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Task(%+v)", *p)
}

type SyncIdlData struct {
	IdlId int64 `thrift:"IdlId,1" frugal:"1,default,i64" json:"IdlId"`
}

func NewSyncIdlData() *SyncIdlData {
	return &SyncIdlData{}
}

func (p *SyncIdlData) InitDefault() {
	*p = SyncIdlData{}
}

func (p *SyncIdlData) GetIdlId() (v int64) {
	return p.IdlId
}
func (p *SyncIdlData) SetIdlId(val int64) {
	p.IdlId = val
}

func (p *SyncIdlData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncIdlData(%+v)", *p)
}

type Data struct {
	SyncIdlData *SyncIdlData `thrift:"syncIdlData,1,optional" frugal:"1,optional,SyncIdlData" json:"syncIdlData,omitempty"`
}

func NewData() *Data {
	return &Data{}
}

func (p *Data) InitDefault() {
	*p = Data{}
}

var Data_SyncIdlData_DEFAULT *SyncIdlData

func (p *Data) GetSyncIdlData() (v *SyncIdlData) {
	if !p.IsSetSyncIdlData() {
		return Data_SyncIdlData_DEFAULT
	}
	return p.SyncIdlData
}
func (p *Data) SetSyncIdlData(val *SyncIdlData) {
	p.SyncIdlData = val
}

func (p *Data) CountSetFieldsData() int {
	count := 0
	if p.IsSetSyncIdlData() {
		count++
	}
	return count
}

func (p *Data) IsSetSyncIdlData() bool {
	return p.SyncIdlData != nil
}

func (p *Data) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Data(%+v)", *p)
}
