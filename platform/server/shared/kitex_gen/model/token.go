// Code generated by thriftgo (0.3.4). DO NOT EDIT.

package model

import (
	"fmt"
)

type Token struct {
	Id               int64  `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	RepositoryType   int32  `thrift:"repository_type,2" frugal:"2,default,i32" json:"repository_type"`
	RepositoryDomain string `thrift:"repository_domain,3" frugal:"3,default,string" json:"repository_domain"`
	Owner            string `thrift:"owner,4" frugal:"4,default,string" json:"owner"`
	OwnerId          int64  `thrift:"owner_id,5" frugal:"5,default,i64" json:"owner_id"`
	TokenType        int32  `thrift:"token_type,6" frugal:"6,default,i32" json:"token_type"`
	Token            string `thrift:"token,7" frugal:"7,default,string" json:"token"`
	Status           int32  `thrift:"status,8" frugal:"8,default,i32" json:"status"`
	ExpirationTime   string `thrift:"expiration_time,9" frugal:"9,default,string" json:"expiration_time"`
	IsDeleted        bool   `thrift:"is_deleted,10" frugal:"10,default,bool" json:"is_deleted"`
	CreateTime       string `thrift:"create_time,11" frugal:"11,default,string" json:"create_time"`
	UpdateTime       string `thrift:"update_time,12" frugal:"12,default,string" json:"update_time"`
}

func NewToken() *Token {
	return &Token{}
}

func (p *Token) InitDefault() {
	*p = Token{}
}

func (p *Token) GetId() (v int64) {
	return p.Id
}

func (p *Token) GetRepositoryType() (v int32) {
	return p.RepositoryType
}

func (p *Token) GetRepositoryDomain() (v string) {
	return p.RepositoryDomain
}

func (p *Token) GetOwner() (v string) {
	return p.Owner
}

func (p *Token) GetOwnerId() (v int64) {
	return p.OwnerId
}

func (p *Token) GetTokenType() (v int32) {
	return p.TokenType
}

func (p *Token) GetToken() (v string) {
	return p.Token
}

func (p *Token) GetStatus() (v int32) {
	return p.Status
}

func (p *Token) GetExpirationTime() (v string) {
	return p.ExpirationTime
}

func (p *Token) GetIsDeleted() (v bool) {
	return p.IsDeleted
}

func (p *Token) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *Token) GetUpdateTime() (v string) {
	return p.UpdateTime
}
func (p *Token) SetId(val int64) {
	p.Id = val
}
func (p *Token) SetRepositoryType(val int32) {
	p.RepositoryType = val
}
func (p *Token) SetRepositoryDomain(val string) {
	p.RepositoryDomain = val
}
func (p *Token) SetOwner(val string) {
	p.Owner = val
}
func (p *Token) SetOwnerId(val int64) {
	p.OwnerId = val
}
func (p *Token) SetTokenType(val int32) {
	p.TokenType = val
}
func (p *Token) SetToken(val string) {
	p.Token = val
}
func (p *Token) SetStatus(val int32) {
	p.Status = val
}
func (p *Token) SetExpirationTime(val string) {
	p.ExpirationTime = val
}
func (p *Token) SetIsDeleted(val bool) {
	p.IsDeleted = val
}
func (p *Token) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *Token) SetUpdateTime(val string) {
	p.UpdateTime = val
}

func (p *Token) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Token(%+v)", *p)
}
