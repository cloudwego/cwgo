// Code generated by thriftgo (0.3.4). DO NOT EDIT.

package model

import (
	"fmt"
)

type IDL struct {
	Id                  int64        `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	IdlRepositoryId     int64        `thrift:"idl_repository_id,2" frugal:"2,default,i64" json:"idl_repository_id"`
	ServiceRepositoryId int64        `thrift:"service_repository_id,3" frugal:"3,default,i64" json:"service_repository_id"`
	MainIdlPath         string       `thrift:"main_idl_path,4" frugal:"4,default,string" json:"main_idl_path"`
	CommitHash          string       `thrift:"commit_hash,5" frugal:"5,default,string" json:"commit_hash"`
	ImportIdls          []*ImportIDL `thrift:"import_idls,6" frugal:"6,default,list<ImportIDL>" json:"import_idls"`
	ServiceName         string       `thrift:"service_name,7" frugal:"7,default,string" json:"service_name"`
	LastSyncTime        string       `thrift:"last_sync_time,8" frugal:"8,default,string" json:"last_sync_time"`
	Status              int32        `thrift:"status,9" frugal:"9,default,i32" json:"status"`
	IsDeleted           bool         `thrift:"is_deleted,10" frugal:"10,default,bool" json:"is_deleted"`
	CreateTime          string       `thrift:"create_time,11" frugal:"11,default,string" json:"create_time"`
	UpdateTime          string       `thrift:"update_time,12" frugal:"12,default,string" json:"update_time"`
}

func NewIDL() *IDL {
	return &IDL{}
}

func (p *IDL) InitDefault() {
	*p = IDL{}
}

func (p *IDL) GetId() (v int64) {
	return p.Id
}

func (p *IDL) GetIdlRepositoryId() (v int64) {
	return p.IdlRepositoryId
}

func (p *IDL) GetServiceRepositoryId() (v int64) {
	return p.ServiceRepositoryId
}

func (p *IDL) GetMainIdlPath() (v string) {
	return p.MainIdlPath
}

func (p *IDL) GetCommitHash() (v string) {
	return p.CommitHash
}

func (p *IDL) GetImportIdls() (v []*ImportIDL) {
	return p.ImportIdls
}

func (p *IDL) GetServiceName() (v string) {
	return p.ServiceName
}

func (p *IDL) GetLastSyncTime() (v string) {
	return p.LastSyncTime
}

func (p *IDL) GetStatus() (v int32) {
	return p.Status
}

func (p *IDL) GetIsDeleted() (v bool) {
	return p.IsDeleted
}

func (p *IDL) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *IDL) GetUpdateTime() (v string) {
	return p.UpdateTime
}
func (p *IDL) SetId(val int64) {
	p.Id = val
}
func (p *IDL) SetIdlRepositoryId(val int64) {
	p.IdlRepositoryId = val
}
func (p *IDL) SetServiceRepositoryId(val int64) {
	p.ServiceRepositoryId = val
}
func (p *IDL) SetMainIdlPath(val string) {
	p.MainIdlPath = val
}
func (p *IDL) SetCommitHash(val string) {
	p.CommitHash = val
}
func (p *IDL) SetImportIdls(val []*ImportIDL) {
	p.ImportIdls = val
}
func (p *IDL) SetServiceName(val string) {
	p.ServiceName = val
}
func (p *IDL) SetLastSyncTime(val string) {
	p.LastSyncTime = val
}
func (p *IDL) SetStatus(val int32) {
	p.Status = val
}
func (p *IDL) SetIsDeleted(val bool) {
	p.IsDeleted = val
}
func (p *IDL) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *IDL) SetUpdateTime(val string) {
	p.UpdateTime = val
}

func (p *IDL) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IDL(%+v)", *p)
}

type ImportIDL struct {
	IdlPath    string `thrift:"idl_path,1" frugal:"1,default,string" json:"idl_path"`
	CommitHash string `thrift:"commit_hash,2" frugal:"2,default,string" json:"commit_hash"`
}

func NewImportIDL() *ImportIDL {
	return &ImportIDL{}
}

func (p *ImportIDL) InitDefault() {
	*p = ImportIDL{}
}

func (p *ImportIDL) GetIdlPath() (v string) {
	return p.IdlPath
}

func (p *ImportIDL) GetCommitHash() (v string) {
	return p.CommitHash
}
func (p *ImportIDL) SetIdlPath(val string) {
	p.IdlPath = val
}
func (p *ImportIDL) SetCommitHash(val string) {
	p.CommitHash = val
}

func (p *ImportIDL) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ImportIDL(%+v)", *p)
}

type IDLWithRepositoryInfo struct {
	Id                  int64        `thrift:"id,1" frugal:"1,default,i64" json:"id"`
	IdlRepositoryId     int64        `thrift:"idl_repository_id,2" frugal:"2,default,i64" json:"idl_repository_id"`
	IdlRepository       *Repository  `thrift:"idl_repository,3" frugal:"3,default,Repository" json:"idl_repository"`
	ServiceRepositoryId int64        `thrift:"service_repository_id,4" frugal:"4,default,i64" json:"service_repository_id"`
	ServiceRepository   *Repository  `thrift:"service_repository,5" frugal:"5,default,Repository" json:"service_repository"`
	MainIdlPath         string       `thrift:"main_idl_path,6" frugal:"6,default,string" json:"main_idl_path"`
	CommitHash          string       `thrift:"commit_hash,7" frugal:"7,default,string" json:"commit_hash"`
	ImportIdls          []*ImportIDL `thrift:"import_idls,8" frugal:"8,default,list<ImportIDL>" json:"import_idls"`
	ServiceName         string       `thrift:"service_name,9" frugal:"9,default,string" json:"service_name"`
	LastSyncTime        string       `thrift:"last_sync_time,10" frugal:"10,default,string" json:"last_sync_time"`
	Status              int32        `thrift:"status,11" frugal:"11,default,i32" json:"status"`
	IsDeleted           bool         `thrift:"is_deleted,12" frugal:"12,default,bool" json:"is_deleted"`
	CreateTime          string       `thrift:"create_time,13" frugal:"13,default,string" json:"create_time"`
	UpdateTime          string       `thrift:"update_time,14" frugal:"14,default,string" json:"update_time"`
}

func NewIDLWithRepositoryInfo() *IDLWithRepositoryInfo {
	return &IDLWithRepositoryInfo{}
}

func (p *IDLWithRepositoryInfo) InitDefault() {
	*p = IDLWithRepositoryInfo{}
}

func (p *IDLWithRepositoryInfo) GetId() (v int64) {
	return p.Id
}

func (p *IDLWithRepositoryInfo) GetIdlRepositoryId() (v int64) {
	return p.IdlRepositoryId
}

var IDLWithRepositoryInfo_IdlRepository_DEFAULT *Repository

func (p *IDLWithRepositoryInfo) GetIdlRepository() (v *Repository) {
	if !p.IsSetIdlRepository() {
		return IDLWithRepositoryInfo_IdlRepository_DEFAULT
	}
	return p.IdlRepository
}

func (p *IDLWithRepositoryInfo) GetServiceRepositoryId() (v int64) {
	return p.ServiceRepositoryId
}

var IDLWithRepositoryInfo_ServiceRepository_DEFAULT *Repository

func (p *IDLWithRepositoryInfo) GetServiceRepository() (v *Repository) {
	if !p.IsSetServiceRepository() {
		return IDLWithRepositoryInfo_ServiceRepository_DEFAULT
	}
	return p.ServiceRepository
}

func (p *IDLWithRepositoryInfo) GetMainIdlPath() (v string) {
	return p.MainIdlPath
}

func (p *IDLWithRepositoryInfo) GetCommitHash() (v string) {
	return p.CommitHash
}

func (p *IDLWithRepositoryInfo) GetImportIdls() (v []*ImportIDL) {
	return p.ImportIdls
}

func (p *IDLWithRepositoryInfo) GetServiceName() (v string) {
	return p.ServiceName
}

func (p *IDLWithRepositoryInfo) GetLastSyncTime() (v string) {
	return p.LastSyncTime
}

func (p *IDLWithRepositoryInfo) GetStatus() (v int32) {
	return p.Status
}

func (p *IDLWithRepositoryInfo) GetIsDeleted() (v bool) {
	return p.IsDeleted
}

func (p *IDLWithRepositoryInfo) GetCreateTime() (v string) {
	return p.CreateTime
}

func (p *IDLWithRepositoryInfo) GetUpdateTime() (v string) {
	return p.UpdateTime
}
func (p *IDLWithRepositoryInfo) SetId(val int64) {
	p.Id = val
}
func (p *IDLWithRepositoryInfo) SetIdlRepositoryId(val int64) {
	p.IdlRepositoryId = val
}
func (p *IDLWithRepositoryInfo) SetIdlRepository(val *Repository) {
	p.IdlRepository = val
}
func (p *IDLWithRepositoryInfo) SetServiceRepositoryId(val int64) {
	p.ServiceRepositoryId = val
}
func (p *IDLWithRepositoryInfo) SetServiceRepository(val *Repository) {
	p.ServiceRepository = val
}
func (p *IDLWithRepositoryInfo) SetMainIdlPath(val string) {
	p.MainIdlPath = val
}
func (p *IDLWithRepositoryInfo) SetCommitHash(val string) {
	p.CommitHash = val
}
func (p *IDLWithRepositoryInfo) SetImportIdls(val []*ImportIDL) {
	p.ImportIdls = val
}
func (p *IDLWithRepositoryInfo) SetServiceName(val string) {
	p.ServiceName = val
}
func (p *IDLWithRepositoryInfo) SetLastSyncTime(val string) {
	p.LastSyncTime = val
}
func (p *IDLWithRepositoryInfo) SetStatus(val int32) {
	p.Status = val
}
func (p *IDLWithRepositoryInfo) SetIsDeleted(val bool) {
	p.IsDeleted = val
}
func (p *IDLWithRepositoryInfo) SetCreateTime(val string) {
	p.CreateTime = val
}
func (p *IDLWithRepositoryInfo) SetUpdateTime(val string) {
	p.UpdateTime = val
}

func (p *IDLWithRepositoryInfo) IsSetIdlRepository() bool {
	return p.IdlRepository != nil
}

func (p *IDLWithRepositoryInfo) IsSetServiceRepository() bool {
	return p.ServiceRepository != nil
}

func (p *IDLWithRepositoryInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IDLWithRepositoryInfo(%+v)", *p)
}
