// Code generated by thriftgo (0.3.4). DO NOT EDIT.

package idl

import (
	"context"
	"fmt"
	"github.com/cloudwego/cwgo/platform/server/shared/kitex_gen/model"
)

type AddIDLReq struct {
	RepositoryId          int64  `thrift:"repository_id,1" frugal:"1,default,i64" form:"repository_id,required" json:"repository_id,required"`
	MainIdlPath           string `thrift:"main_idl_path,2" frugal:"2,default,string" form:"main_idl_path,required" json:"main_idl_path,required" vd:"len($)>0"`
	ServiceName           string `thrift:"service_name,3" frugal:"3,default,string" form:"service_name,required" json:"service_name,required" vd:"len($)>0"`
	ServiceRepositoryName string `thrift:"service_repository_name,4" frugal:"4,default,string" form:"service_repository_name" json:"service_repository_name"`
}

func NewAddIDLReq() *AddIDLReq {
	return &AddIDLReq{}
}

func (p *AddIDLReq) InitDefault() {
	*p = AddIDLReq{}
}

func (p *AddIDLReq) GetRepositoryId() (v int64) {
	return p.RepositoryId
}

func (p *AddIDLReq) GetMainIdlPath() (v string) {
	return p.MainIdlPath
}

func (p *AddIDLReq) GetServiceName() (v string) {
	return p.ServiceName
}

func (p *AddIDLReq) GetServiceRepositoryName() (v string) {
	return p.ServiceRepositoryName
}
func (p *AddIDLReq) SetRepositoryId(val int64) {
	p.RepositoryId = val
}
func (p *AddIDLReq) SetMainIdlPath(val string) {
	p.MainIdlPath = val
}
func (p *AddIDLReq) SetServiceName(val string) {
	p.ServiceName = val
}
func (p *AddIDLReq) SetServiceRepositoryName(val string) {
	p.ServiceRepositoryName = val
}

func (p *AddIDLReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddIDLReq(%+v)", *p)
}

type AddIDLRes struct {
	Code int32  `thrift:"code,1" frugal:"1,default,i32" form:"code" json:"code" query:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" form:"msg" json:"msg" query:"msg"`
}

func NewAddIDLRes() *AddIDLRes {
	return &AddIDLRes{}
}

func (p *AddIDLRes) InitDefault() {
	*p = AddIDLRes{}
}

func (p *AddIDLRes) GetCode() (v int32) {
	return p.Code
}

func (p *AddIDLRes) GetMsg() (v string) {
	return p.Msg
}
func (p *AddIDLRes) SetCode(val int32) {
	p.Code = val
}
func (p *AddIDLRes) SetMsg(val string) {
	p.Msg = val
}

func (p *AddIDLRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddIDLRes(%+v)", *p)
}

type DeleteIDLsReq struct {
	Ids []int64 `thrift:"ids,1" frugal:"1,default,list<i64>" form:"ids,required" json:"ids,required" vd:"len($)>0"`
}

func NewDeleteIDLsReq() *DeleteIDLsReq {
	return &DeleteIDLsReq{}
}

func (p *DeleteIDLsReq) InitDefault() {
	*p = DeleteIDLsReq{}
}

func (p *DeleteIDLsReq) GetIds() (v []int64) {
	return p.Ids
}
func (p *DeleteIDLsReq) SetIds(val []int64) {
	p.Ids = val
}

func (p *DeleteIDLsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteIDLsReq(%+v)", *p)
}

type DeleteIDLsRes struct {
	Code int32  `thrift:"code,1" frugal:"1,default,i32" form:"code" json:"code" query:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" form:"msg" json:"msg" query:"msg"`
}

func NewDeleteIDLsRes() *DeleteIDLsRes {
	return &DeleteIDLsRes{}
}

func (p *DeleteIDLsRes) InitDefault() {
	*p = DeleteIDLsRes{}
}

func (p *DeleteIDLsRes) GetCode() (v int32) {
	return p.Code
}

func (p *DeleteIDLsRes) GetMsg() (v string) {
	return p.Msg
}
func (p *DeleteIDLsRes) SetCode(val int32) {
	p.Code = val
}
func (p *DeleteIDLsRes) SetMsg(val string) {
	p.Msg = val
}

func (p *DeleteIDLsRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DeleteIDLsRes(%+v)", *p)
}

type UpdateIDLReq struct {
	Id          int64  `thrift:"id,1" frugal:"1,default,i64" form:"id,required" json:"id,required"`
	Status      int32  `thrift:"status,2" frugal:"2,default,i32" form:"status" json:"status"`
	ServiceName string `thrift:"service_name,3" frugal:"3,default,string" form:"service_name" json:"service_name"`
}

func NewUpdateIDLReq() *UpdateIDLReq {
	return &UpdateIDLReq{}
}

func (p *UpdateIDLReq) InitDefault() {
	*p = UpdateIDLReq{}
}

func (p *UpdateIDLReq) GetId() (v int64) {
	return p.Id
}

func (p *UpdateIDLReq) GetStatus() (v int32) {
	return p.Status
}

func (p *UpdateIDLReq) GetServiceName() (v string) {
	return p.ServiceName
}
func (p *UpdateIDLReq) SetId(val int64) {
	p.Id = val
}
func (p *UpdateIDLReq) SetStatus(val int32) {
	p.Status = val
}
func (p *UpdateIDLReq) SetServiceName(val string) {
	p.ServiceName = val
}

func (p *UpdateIDLReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateIDLReq(%+v)", *p)
}

type UpdateIDLRes struct {
	Code int32  `thrift:"code,1" frugal:"1,default,i32" form:"code" json:"code" query:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" form:"msg" json:"msg" query:"msg"`
}

func NewUpdateIDLRes() *UpdateIDLRes {
	return &UpdateIDLRes{}
}

func (p *UpdateIDLRes) InitDefault() {
	*p = UpdateIDLRes{}
}

func (p *UpdateIDLRes) GetCode() (v int32) {
	return p.Code
}

func (p *UpdateIDLRes) GetMsg() (v string) {
	return p.Msg
}
func (p *UpdateIDLRes) SetCode(val int32) {
	p.Code = val
}
func (p *UpdateIDLRes) SetMsg(val string) {
	p.Msg = val
}

func (p *UpdateIDLRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateIDLRes(%+v)", *p)
}

type GetIDLsReq struct {
	Page        int32  `thrift:"page,1" frugal:"1,default,i32" json:"page" query:"page" vd:"$>=0"`
	Limit       int32  `thrift:"limit,2" frugal:"2,default,i32" json:"limit" query:"limit" vd:"$>=0"`
	Order       int32  `thrift:"order,3" frugal:"3,default,i32" json:"order" query:"order" vd:"$>=0"`
	OrderBy     string `thrift:"order_by,4" frugal:"4,default,string" json:"order_by" query:"order_by"`
	ServiceName string `thrift:"service_name,5" frugal:"5,default,string" json:"service_name" query:"service_name"`
}

func NewGetIDLsReq() *GetIDLsReq {
	return &GetIDLsReq{}
}

func (p *GetIDLsReq) InitDefault() {
	*p = GetIDLsReq{}
}

func (p *GetIDLsReq) GetPage() (v int32) {
	return p.Page
}

func (p *GetIDLsReq) GetLimit() (v int32) {
	return p.Limit
}

func (p *GetIDLsReq) GetOrder() (v int32) {
	return p.Order
}

func (p *GetIDLsReq) GetOrderBy() (v string) {
	return p.OrderBy
}

func (p *GetIDLsReq) GetServiceName() (v string) {
	return p.ServiceName
}
func (p *GetIDLsReq) SetPage(val int32) {
	p.Page = val
}
func (p *GetIDLsReq) SetLimit(val int32) {
	p.Limit = val
}
func (p *GetIDLsReq) SetOrder(val int32) {
	p.Order = val
}
func (p *GetIDLsReq) SetOrderBy(val string) {
	p.OrderBy = val
}
func (p *GetIDLsReq) SetServiceName(val string) {
	p.ServiceName = val
}

func (p *GetIDLsReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIDLsReq(%+v)", *p)
}

type GetIDLsRes struct {
	Code int32           `thrift:"code,1" frugal:"1,default,i32" form:"code" json:"code" query:"code"`
	Msg  string          `thrift:"msg,2" frugal:"2,default,string" form:"msg" json:"msg" query:"msg"`
	Data *GetIDLsResData `thrift:"data,3" frugal:"3,default,GetIDLsResData" form:"data" json:"data" query:"data"`
}

func NewGetIDLsRes() *GetIDLsRes {
	return &GetIDLsRes{}
}

func (p *GetIDLsRes) InitDefault() {
	*p = GetIDLsRes{}
}

func (p *GetIDLsRes) GetCode() (v int32) {
	return p.Code
}

func (p *GetIDLsRes) GetMsg() (v string) {
	return p.Msg
}

var GetIDLsRes_Data_DEFAULT *GetIDLsResData

func (p *GetIDLsRes) GetData() (v *GetIDLsResData) {
	if !p.IsSetData() {
		return GetIDLsRes_Data_DEFAULT
	}
	return p.Data
}
func (p *GetIDLsRes) SetCode(val int32) {
	p.Code = val
}
func (p *GetIDLsRes) SetMsg(val string) {
	p.Msg = val
}
func (p *GetIDLsRes) SetData(val *GetIDLsResData) {
	p.Data = val
}

func (p *GetIDLsRes) IsSetData() bool {
	return p.Data != nil
}

func (p *GetIDLsRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIDLsRes(%+v)", *p)
}

type GetIDLsResData struct {
	Idls  []*model.IDLWithRepositoryInfo `thrift:"idls,1" frugal:"1,default,list<model.IDLWithRepositoryInfo>" form:"idls" json:"idls" query:"idls"`
	Total int32                          `thrift:"total,2" frugal:"2,default,i32" form:"total" json:"total" query:"total"`
}

func NewGetIDLsResData() *GetIDLsResData {
	return &GetIDLsResData{}
}

func (p *GetIDLsResData) InitDefault() {
	*p = GetIDLsResData{}
}

func (p *GetIDLsResData) GetIdls() (v []*model.IDLWithRepositoryInfo) {
	return p.Idls
}

func (p *GetIDLsResData) GetTotal() (v int32) {
	return p.Total
}
func (p *GetIDLsResData) SetIdls(val []*model.IDLWithRepositoryInfo) {
	p.Idls = val
}
func (p *GetIDLsResData) SetTotal(val int32) {
	p.Total = val
}

func (p *GetIDLsResData) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetIDLsResData(%+v)", *p)
}

type SyncIDLsByIdReq struct {
	Ids []int64 `thrift:"ids,1" frugal:"1,default,list<i64>" form:"ids,required" json:"ids,required" vd:"len($)>0"`
}

func NewSyncIDLsByIdReq() *SyncIDLsByIdReq {
	return &SyncIDLsByIdReq{}
}

func (p *SyncIDLsByIdReq) InitDefault() {
	*p = SyncIDLsByIdReq{}
}

func (p *SyncIDLsByIdReq) GetIds() (v []int64) {
	return p.Ids
}
func (p *SyncIDLsByIdReq) SetIds(val []int64) {
	p.Ids = val
}

func (p *SyncIDLsByIdReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncIDLsByIdReq(%+v)", *p)
}

type SyncIDLsByIdRes struct {
	Code int32  `thrift:"code,1" frugal:"1,default,i32" form:"code" json:"code" query:"code"`
	Msg  string `thrift:"msg,2" frugal:"2,default,string" form:"msg" json:"msg" query:"msg"`
}

func NewSyncIDLsByIdRes() *SyncIDLsByIdRes {
	return &SyncIDLsByIdRes{}
}

func (p *SyncIDLsByIdRes) InitDefault() {
	*p = SyncIDLsByIdRes{}
}

func (p *SyncIDLsByIdRes) GetCode() (v int32) {
	return p.Code
}

func (p *SyncIDLsByIdRes) GetMsg() (v string) {
	return p.Msg
}
func (p *SyncIDLsByIdRes) SetCode(val int32) {
	p.Code = val
}
func (p *SyncIDLsByIdRes) SetMsg(val string) {
	p.Msg = val
}

func (p *SyncIDLsByIdRes) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SyncIDLsByIdRes(%+v)", *p)
}

type IdlService interface {
	AddIDL(ctx context.Context, req *AddIDLReq) (r *AddIDLRes, err error)

	DeleteIDL(ctx context.Context, req *DeleteIDLsReq) (r *DeleteIDLsRes, err error)

	UpdateIDL(ctx context.Context, req *UpdateIDLReq) (r *UpdateIDLRes, err error)

	GetIDLs(ctx context.Context, req *GetIDLsReq) (r *GetIDLsRes, err error)

	SyncIDLs(ctx context.Context, req *SyncIDLsByIdReq) (r *SyncIDLsByIdRes, err error)
}
